@page "/TodoList"
@using System.Text
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using WebAppWithHighSecurity.Data
@inject UserManager<ApplicationUser> UserManager
@inject IServiceScopeFactory ServiceScopeFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAsymmetricEncryptionService AsymmetricEncryptionService
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer
@attribute [Authorize]

<h3>Todo List</h3>

<p>Welcome, @_userName (@_roleName)</p>

<ul>
    @foreach (var item in _todoItems)
    {
        <li>@item.Description</li>
    }
</ul>

<input @bind="newTodoDescription" placeholder="New todo item..."/>
<button @onclick="AddTodo">Add</button>

@code {
    private string? _userName;
    private string? _roleName;
    private List<TodoItem> _todoItems = new();
    private string newTodoDescription = string.Empty;

    private void TestLocalEncryptionDecryption()
    {
        try
        {
            var testText = "Hello RSA!";
            var publicKey = AsymmetricEncryptionService.GetPublicKey();

            // Encrypt locally
            var encryptedBytes = AsymmetricEncryptionService.Encrypt(testText, publicKey);
            var base64 = Convert.ToBase64String(encryptedBytes);
            Console.WriteLine("🔐 Locally Encrypted (Base64): " + base64);

            // Decrypt locally
            var decryptedText = AsymmetricEncryptionService.Decrypt(encryptedBytes);
            Console.WriteLine("✅ Locally Decrypted: " + decryptedText);
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Local encryption/decryption test failed: " + ex.Message);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                _userName = user.Identity.Name;
                var roles = await UserManager.GetRolesAsync(appUser);
                _roleName = string.Join(", ", roles);

                using var scope = ServiceScopeFactory.CreateScope();
                var dbContext = scope.ServiceProvider.GetRequiredService<CprTodoDbContext>();
                var encryptedItems = await dbContext.TodoItems.Where(t => t.UserId == appUser.Id).ToListAsync();
                foreach (var item in encryptedItems)
                {
                    try
                    {
                        var base64 = item.Description.Trim().Trim('"');
                        Console.WriteLine($"Fixed base64: {base64}");
                        var cipherBytes = Convert.FromBase64String(base64);
                        item.Description = AsymmetricEncryptionService.Decrypt(cipherBytes);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error decrypting item {item.Id}: {ex.Message}");
                    }
                }

                _todoItems = encryptedItems;
            }
        }
        
        TestLocalEncryptionDecryption();
    }

    private async Task AddTodo()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                var publicKey = AsymmetricEncryptionService.GetPublicKey();
                var client = HttpClientFactory.CreateClient("ApiClient");
                using var scope = ServiceScopeFactory.CreateScope();
                var dbContext = scope.ServiceProvider.GetRequiredService<CprTodoDbContext>();

                var response = await client.PostAsJsonAsync("AsymmetricEncryption/Encrypt", new
                {
                    PublicKey = publicKey,
                    PlainText = newTodoDescription
                });

                string base64CipherText = await response.Content.ReadAsStringAsync(); // ✅ Proper Base64 string

                var todoItem = new TodoItem
                {
                    UserId = appUser.Id,
                    Description = base64CipherText // ✅ Save directly to DB
                };

                dbContext.TodoItems.Add(todoItem);
                await dbContext.SaveChangesAsync();

                // Show the plaintext in UI immediately
                todoItem.Description = newTodoDescription;
                _todoItems.Add(todoItem);
                newTodoDescription = string.Empty;
            }
        }
    }


}